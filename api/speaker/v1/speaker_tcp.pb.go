// Code generated by protoc-gen-go-tcp. DO NOT EDIT.
// versions:
// - protoc-gen-go-tcp v2.8.6
// - protoc            v3.6.1
// source: speaker/v1/speaker.proto

package v1

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"context"

	"github.com/yola1107/kratos/v2/library/task"
	"github.com/yola1107/kratos/v2/transport/tcp"

	"google.golang.org/protobuf/proto"
)

var tcpLoopIns *task.Loop

func GetLoopTcp() *task.Loop { return tcpLoopIns }

// SpeakerTcpServer is the server API for Speaker service.
type SpeakerTCPServer interface {
	SetCometChan(cl *tcp.ChanList, cs *tcp.Server)
	IsLoopFunc(f string) (isLoop bool)
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
	SayHello2Req(context.Context, *Hello2Request) (*Hello2Reply, error)
}

func RegisterSpeakerTCPServer(s *tcp.Server, srv SpeakerTCPServer) {
	chanList := s.RegisterService(&Speaker_TCP_ServiceDesc, srv)
	srv.SetCometChan(chanList, s)
	tcpLoopIns = task.NewLoop(10000)
	tcpLoopIns.Start()
}

func _Speaker_SayHelloReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(HelloRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(SpeakerTCPServer).SayHelloReq(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Speaker/SayHelloReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out := new(HelloReply)
		var err error
		if srv.(SpeakerTCPServer).IsLoopFunc("SayHelloReq") {
			rspChan := make(chan *HelloReply)
			errChan := make(chan error)
			tcpLoopIns.Post(func() {
				resp, err := srv.(SpeakerTCPServer).SayHelloReq(ctx, req.(*HelloRequest))
				rspChan <- resp
				errChan <- err
			})
			out = <-rspChan
			err = <-errChan
		} else {
			out, err = srv.(SpeakerTCPServer).SayHelloReq(ctx, req.(*HelloRequest))
		}
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}

func _Speaker_SayHello2Req_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(Hello2Request)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(SpeakerTCPServer).SayHello2Req(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Speaker/SayHello2Req",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out := new(Hello2Reply)
		var err error
		if srv.(SpeakerTCPServer).IsLoopFunc("SayHello2Req") {
			rspChan := make(chan *Hello2Reply)
			errChan := make(chan error)
			tcpLoopIns.Post(func() {
				resp, err := srv.(SpeakerTCPServer).SayHello2Req(ctx, req.(*Hello2Request))
				rspChan <- resp
				errChan <- err
			})
			out = <-rspChan
			err = <-errChan
		} else {
			out, err = srv.(SpeakerTCPServer).SayHello2Req(ctx, req.(*Hello2Request))
		}
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}

var Speaker_TCP_ServiceDesc = tcp.ServiceDesc{
	ServiceName: "helloworld.v1.Speaker",
	HandlerType: (*SpeakerTCPServer)(nil),
	Methods: []tcp.MethodDesc{
		{
			MethodName: "SayHelloReq",
			Handler:    _Speaker_SayHelloReq_TCP_Handler,
			Ops:        1001,
		},
		{
			MethodName: "SayHello2Req",
			Handler:    _Speaker_SayHello2Req_TCP_Handler,
			Ops:        1003,
		},
	},
}
