// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: speaker/v1/speaker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Speaker_SayHelloReq_FullMethodName  = "/helloworld.v1.Speaker/SayHelloReq"
	Speaker_SayHello2Req_FullMethodName = "/helloworld.v1.Speaker/SayHello2Req"
)

// SpeakerClient is the client API for Speaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type SpeakerClient interface {
	// Sends a greeting
	SayHelloReq(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Sends a greeting by post
	SayHello2Req(ctx context.Context, in *Hello2Request, opts ...grpc.CallOption) (*Hello2Reply, error)
}

type speakerClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakerClient(cc grpc.ClientConnInterface) SpeakerClient {
	return &speakerClient{cc}
}

func (c *speakerClient) SayHelloReq(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Speaker_SayHelloReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerClient) SayHello2Req(ctx context.Context, in *Hello2Request, opts ...grpc.CallOption) (*Hello2Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hello2Reply)
	err := c.cc.Invoke(ctx, Speaker_SayHello2Req_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeakerServer is the server API for Speaker service.
// All implementations must embed UnimplementedSpeakerServer
// for forward compatibility.
//
// The greeting service definition.
type SpeakerServer interface {
	// Sends a greeting
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
	// Sends a greeting by post
	SayHello2Req(context.Context, *Hello2Request) (*Hello2Reply, error)
	mustEmbedUnimplementedSpeakerServer()
}

// UnimplementedSpeakerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpeakerServer struct{}

func (UnimplementedSpeakerServer) SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloReq not implemented")
}
func (UnimplementedSpeakerServer) SayHello2Req(context.Context, *Hello2Request) (*Hello2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello2Req not implemented")
}
func (UnimplementedSpeakerServer) mustEmbedUnimplementedSpeakerServer() {}
func (UnimplementedSpeakerServer) testEmbeddedByValue()                 {}

// UnsafeSpeakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeakerServer will
// result in compilation errors.
type UnsafeSpeakerServer interface {
	mustEmbedUnimplementedSpeakerServer()
}

func RegisterSpeakerServer(s grpc.ServiceRegistrar, srv SpeakerServer) {
	// If the following call pancis, it indicates UnimplementedSpeakerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Speaker_ServiceDesc, srv)
}

func _Speaker_SayHelloReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServer).SayHelloReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speaker_SayHelloReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServer).SayHelloReq(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speaker_SayHello2Req_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServer).SayHello2Req(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speaker_SayHello2Req_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServer).SayHello2Req(ctx, req.(*Hello2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Speaker_ServiceDesc is the grpc.ServiceDesc for Speaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Speaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.Speaker",
	HandlerType: (*SpeakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloReq",
			Handler:    _Speaker_SayHelloReq_Handler,
		},
		{
			MethodName: "SayHello2Req",
			Handler:    _Speaker_SayHello2Req_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speaker/v1/speaker.proto",
}
